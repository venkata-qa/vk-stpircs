import static groovy.json.JsonOutput.*

@NonCPS
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}

pipeline {
    agent { label "dev" }
    parameters {
        choice(name: 'env_name', choices: ["ist", "cit"], description: 'Environment of Wiremock')     
        choice(name: 'iteration', choices: ["01", "02", "03", "04", "05", "06", "07", "08", "09"], description: 'Tier of Wiremock')     
        string(name: 'perf_branch', defaultValue: "mock-setup", description: 'Performance-test-automation branch')
    }
    environment {
        AWS_REGION = 'eu-west-2'
        INSTANCE_FILTER = "*if_${params.env_name}${params.iteration}_wiremock"
    }
    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "Checking out branch: ${params.perf_branch}"
                }
                checkout([$class: 'GitSCM', branches: [[name: params.perf_branch ]], userRemoteConfigs: [[url: "https://gitlab.alm.corp.hmrc.gov.uk/aps-eis-infra/if-ipaas-migration/qualityassurance/performance-test-automation.git", credentialsId: 'almgit-pull-token']]])
            }
        }
        stage('Upload Files to Wiremock') {
            steps {
                script {
                    currentBuild.displayName = "${params.env_name}${params.iteration}-wiremock-upload"
                    withCredentials([sshUserPrivateKey(credentialsId: "nonprod-ec2-user-key", keyFileVariable: 'EC2_USER_KEY')]) {
                        def ip_address = getWiremockIPAddress()
                        uploadMocks(ip_address)
                        restartWiremock(ip_address)
                    }
                }
            }
        }
    }
}

def getWiremockIPAddress() {
    def command = """
        aws ec2 describe-instances \
        --filter Name=tag:Name,Values=${env.INSTANCE_FILTER} \
        --query 'Reservations[*].Instances[*].PrivateIpAddress' \
        --region ${env.AWS_REGION} --output text
    """
    return sh(script: command, returnStdout: true).trim()
}

def uploadMocks(String ipAddress) {
    echo "Uploading mocks to ${ipAddress}"
    sh """
        scp -r -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null src/test/resources/mocks/* ec2-user@${ipAddress}:/home/ec2-user/
        ssh -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${ipAddress} sudo cp -rf /home/ec2-user/mappings /home/ec2-user/wiremocks/
        ssh -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${ipAddress} sudo cp -rf /home/ec2-user/__files /home/ec2-user/wiremocks/
    """
}

def restartWiremock(String ipAddress) {
    echo "Restarting Wiremock on ${ipAddress}"
    sh """
        ssh -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${ipAddress} sudo systemctl restart wiremock
    """
}
