pipeline {
    agent { label "dev" }
    options {
        skipDefaultCheckout(true)
    }
    parameters {
        choice(name: 'env_name', choices: ["ist", "cit"], description: 'Environment of Wiremock')
        choice(name: 'iteration', choices: ["01", "02", "03", "04", "05", "06", "07", "08", "09"], description: 'Tier of Wiremock')
        string(name: 'perf_branch', defaultValue: "mock-setup", description: 'Performance-test-automation branch')
    }
    environment {
        AWS_REGION = 'eu-west-2'
    }
    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "Checking out branch: ${params.perf_branch}"
                }
                checkout([$class: 'GitSCM', branches: [[name: params.perf_branch ]], userRemoteConfigs: [[
                    url: "https://gitlab.alm.corp.hmrc.gov.uk/aps-eis-infra/if-ipaas-migration/qualityassurance/performance-test-automation.git", 
                    credentialsId: 'almgit-pull-token'
                ]]])
            }
        }
        stage("Upload Mocks to Wiremock Server") {
            steps {
                script {
                    currentBuild.displayName = "${params.env_name}${params.iteration}-wiremock-upload"
                    withCredentials([sshUserPrivateKey(credentialsId: "nonprod-ec2-user-key", keyFileVariable: 'EC2_USER_KEY')]) {
                        def dnsName = getWiremockDNSName()
                        def ipAddress = getWiremockIPAddress(dnsName)
                        
                        // Log both DNS and IP
                        echo "Using DNS: ${dnsName}"
                        echo "Resolved IP: ${ipAddress}"
                        
                        // Upload mocks using DNS
                        uploadMocks(dnsName)
                    }
                }
            }
        }
        stage("Restart Wiremock Server") {
            steps {
                script {
                    currentBuild.displayName = "${params.env_name}${params.iteration}-wiremock-restart"
                    withCredentials([sshUserPrivateKey(credentialsId: "nonprod-ec2-user-key", keyFileVariable: 'EC2_USER_KEY')]) {
                        def dnsName = getWiremockDNSName()
                        def ipAddress = getWiremockIPAddress(dnsName)

                        // Log both DNS and IP
                        echo "Using DNS: ${dnsName}"
                        echo "Resolved IP: ${ipAddress}"
                        
                        // Restart Wiremock using DNS
                        restartWiremock(dnsName)
                    }
                }
            }
        }
        stage("Verify Wiremock Server") {
            steps {
                script {
                    currentBuild.displayName = "${params.env_name}${params.iteration}-wiremock-verify"
                    withCredentials([sshUserPrivateKey(credentialsId: "nonprod-ec2-user-key", keyFileVariable: 'EC2_USER_KEY')]) {
                        def dnsName = getWiremockDNSName()
                        def ipAddress = getWiremockIPAddress(dnsName)

                        // Log both DNS and IP
                        echo "Using DNS: ${dnsName}"
                        echo "Resolved IP: ${ipAddress}"
                        
                        // Verify Wiremock using DNS
                        verifyWiremock(dnsName)
                    }
                }
            }
        }
    }
}

def getWiremockDNSName() {
    // Construct DNS name dynamically
    return "wiremock-external.${params.env_name}${params.iteration}.if.n.mes.corp.hmrc.gov.uk"
}

def getWiremockIPAddress(String dnsName) {
    // Resolve DNS to an IP address
    def command = "nslookup ${dnsName} | awk '/^Address: / { print \$2 }' | tail -n1"
    return sh(script: command, returnStdout: true).trim()
}

def uploadMocks(String dnsName) {
    echo "Uploading mocks to DNS: ${dnsName}"
    sh """
        scp -r -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null src/test/resources/mocks/* ec2-user@${dnsName}:/home/ec2-user/
        ssh -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${dnsName} sudo cp -rf /home/ec2-user/mappings /home/ec2-user/wiremocks/
        ssh -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${dnsName} sudo cp -rf /home/ec2-user/__files /home/ec2-user/wiremocks/
    """
}

def restartWiremock(String dnsName) {
    echo "Restarting Wiremock on DNS: ${dnsName}"
    sh """
        ssh -i "${EC2_USER_KEY}" -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${dnsName} sudo systemctl restart wiremock
    """
}

def verifyWiremock(String dnsName) {
    echo "Verifying Wiremock on DNS: ${dnsName}"
    def wiremockStatus = sh(script: """
        curl -s -o /dev/null -w "%{http_code}" http://${dnsName}:8080/__admin
    """, returnStdout: true).trim()
    
    if (wiremockStatus != "200") {
        error "Wiremock is not responding. Status code: ${wiremockStatus}"
    }
    echo "Wiremock is up and running."
}



def verifyWiremock(String dnsName) {
    echo "Verifying Wiremock on DNS: ${dnsName}"
    int maxRetries = 5
    int retryDelay = 5 // seconds
    int attempt = 0
    String wiremockStatus = ""

    while (attempt < maxRetries) {
        attempt++
        wiremockStatus = sh(script: """
            curl -s -o /dev/null -w "%{http_code}" http://${dnsName}:8080/__admin
        """, returnStdout: true).trim()
        
        if (wiremockStatus == "200") {
            echo "Wiremock is up and running."
            return
        }

        echo "Attempt ${attempt} failed with status code: ${wiremockStatus}. Retrying in ${retryDelay} seconds..."
        sleep(retryDelay)
    }

    error "Wiremock did not respond with a 200 status code after ${maxRetries} attempts. Last status code: ${wiremockStatus}"
}
